AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation template for ecs cluster with fargate'

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC to deploy the cluster into

  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet 1 to deploy the cluster into

  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet 2 to deploy the cluster into

  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Private subnet 1 to deploy the cluster into

  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Private subnet 2 to deploy the cluster into

  ImageId:
    Type: String
    Description: The ID of the container image to use

  ClusterName:
    Type: String 
    Description: Name for Cluster. 
    Default: ECS

  FileSystemId:
    Type: String
    Description: The ID of the EFS file system to use

  AccessPointId:
    Type: String
    Description: The ID of the EFS access point to use

  ECSTaskRole:
    Type: String
    Description: The ARN of the ECS task role to use


Resources:
  cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref ClusterName, Cluster]] 
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: service
    Properties:
      MinCapacity: 2
      MaxCapacity: 4
      ResourceId: !Join ['/', [service, !Ref cluster, !GetAtt service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ClusterName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 75

  service:
    Type: AWS::ECS::Service
    DependsOn: 
    - listener
    Properties:
      ServiceName: !Join ['-',[!Ref ClusterName, service]]
      Cluster: !Ref cluster
      TaskDefinition: !Ref taskdefinition
      EnableExecuteCommand: true
      DeploymentConfiguration:
          MinimumHealthyPercent: 100
          MaximumPercent: 200
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref containersecuritygroup
      LoadBalancers:
        - ContainerName: "bucketlist"
          ContainerPort: 80
          TargetGroupArn: !Ref targetgroup
  
  targetgroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: loadbalancer
    Properties:
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: "true"
      - Key: stickiness.type
        Value: lb_cookie 
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 30
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200,302"
      Name: !Join ['-', [!Ref ClusterName, TargetGroup]]
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref targetgroup
          Type: forward
      LoadBalancerArn: !Ref loadbalancer
      Port: 80
      Protocol: HTTP

  loadbalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:      
      Scheme: internet-facing
      SecurityGroups:
        - !Ref albsecuritygroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      

  containersecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref ClusterName, ContainerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref albsecuritygroup
          Description: "Container security group Ingress rule"
    
  albsecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref ClusterName, LoadBalancerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "ALB security group Ingress rule"
     
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ClusterName, taskdefinition]]
      RetentionInDays: 30

  taskdefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Join ["-",[!Ref ClusterName,td]]
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        -
          
          Image: !Ref ImageId
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          MountPoints:
            - 
              ContainerPath: "/mnt"
              SourceVolume: "sites"
          Name: "bucketlist"
          PortMappings:
            -
              ContainerPort: 80
              HostPort: 80
              Protocol: tcp

      Cpu: "4096"
      Memory: "8192"
      NetworkMode: awsvpc
      Volumes:
        - 
          Name: sites
          EFSVolumeConfiguration:
            FilesystemId: !Ref FileSystemId
            AuthorizationConfig:
              IAM: ENABLED
              AccessPointId: !Ref AccessPointId
            TransitEncryption: ENABLED
            RootDirectory: "/"
Outputs:
  ALBEndpoint:
    Description: "ALB endpoint"
    Value: 
      !GetAtt loadbalancer.DNSName
  ClusterName:
    Description: "Cluster Name"
    Value: !Ref ClusterName
  service:
    Description: "Service Name"
    Value: !Ref service
  loadbalancer:
    Description: "Load Balancer Name"
    Value: !Ref loadbalancer